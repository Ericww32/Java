package week06;

/**
 * @author Eric Willoughby
 * @date 17 February 2017
 * */

//Calculates the GCD for two long values and captures the time to execute.

public class TimedGcd {
	
	private long m_elapsedTime; // The elapsed time for the calculation
	private long m_gcdValue; // The GCD value from the calculation

	public TimedGcd() {
		
	}

	/**
	 * @return Return the calculated euclid GCD value
	 * */
	public long getElapsedTime(){
		return m_elapsedTime;
	}
	
	/**
	 * Implementation of euclid algorithm
	 * */
	private long getGcdBreak(long m, long n){
		
		while(true)
		 {
		     long remainder = n % m;
		     if(remainder == 0){
		         break;
		     }
		     n = m;
		     m = remainder;
		 }
		 
		 return m;
	}
	
	/**
	 * @return Return the value generated by the euclid force method
	 * */
	public long getGcdValue(){ 
		return m_gcdValue;
	}
	/**
	 * Start the timed calculations
	 * IllegalArgumentException - if either parameter is less than one
	 * */
	public void start(long m, long n) throws IllegalArgumentException {
		try {
			validateParameters(m, n);
			timeMethod(m, n);
			bruteForceGcd(m, n);
		} catch (IllegalArgumentException e) {
			System.out.println("made it here");
		}
	}
	
	/**
	 * Private method that computes the GCD and times it
	 * */
	private long timeMethod(long m, long n){
		long start, end;
		
		start = System.nanoTime();
		
		getGcdBreak(m, n);
		
		end = System.nanoTime();
		
		m_elapsedTime = end - start;
		
		return m_elapsedTime;
		
	}
	
	/**
	 * Verifies the arguments are valid. Expects them to be 1 or greater
	 * IllegalArgumentException - if either parameter is less than one
	 * */
	private void validateParameters(long m, long n) throws IllegalArgumentException {
		
		try {
			if (m < 1 || n < 1) {
				throw new IllegalArgumentException();
			}
		} catch (Exception e) {
			e.getMessage();
		}
	}

	private void bruteForceGcd(long m, long n){
		//assume m, n >= 1
	    
        long last = Math.min(m, n);
    
        long gcd = 1;
        long i = 1;
    
        while (i <= last) {
    
            if (m % i == 0 && n % i == 0) {
    
                gcd = i;
            }
    
            i++;
        }
    
        this.m_gcdValue = gcd;
	}

}